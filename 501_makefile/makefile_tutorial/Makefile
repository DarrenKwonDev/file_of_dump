# ############
# variable
# ############
# variable only can be STRING
# "", '' has no meaning
DEBUG_MODE = 1 # not int, it's string
EXECUTABLE_NAME = main

# ############
# implicit rules
# ############
# https://www.gnu.org/software/make/manual/html_node/Implicit-Variables.html
# `make -p` to see all predefined variables

# examples
# CC = Program for compiling C programs; default ‘cc’.
# CXX = Program for compiling C++ programs; default ‘g++’.
# CFLAGS = Extra flags to give to the C compiler.
# CXXFLAGS = Extra flags to give to the C++ compiler.
# CPPFLAGS = Extra flags to give to the C preprocessor and programs that use it (the C and Fortran compilers).
# LDFLAGS = Extra flags to give to compilers when they are supposed to invoke the linker, ‘ld’, such as -L. Libraries (-lfoo) should be added to the LDLIBS variable instead.

# you cans chanege these variables by cli
# e.g.) make build CXX_STANDARD=c++14
CC = clang
CXX = clang++

C_STANDARD = c11
CXX_STANDARD = c++17

CXX_WARNINGS = -Wall -Wextra -Wpedantic -Werror
CFLAGS = -std=$(C_STANDARD) $(CXX_WARNINGS)
CXXFLAGS = -std=$(CXX_STANDARD) $(CXX_WARNINGS)
LDFLAGS =

CXX_COMPILER_CALL = $(CXX) $(CXXFLAGS) 

# pattern matching and pattern substitution
CXX_SOURCES = $(wildcard *.cpp)
CXX_OBJECTS = $(patsubst %.cpp, %.o, $(CXX_SOURCES))

ifeq ($(DEBUG_MODE), 1)
# optimzation level 0
	CXXFLAGS += -g -O0 
else
# optimization level 3 (highest)
	CXXFLAGS += -O3 
endif



# ############
# TARGETS
# ############
# target: prerequisites
# 	commands
# ############

# if no arg provied, make will execute the first target

# generated by pattern
build: $(CXX_OBJECTS)
	$(CXX_COMPILER_CALL) main.o mylib.o $(LDFLAGS) -o $(EXECUTABLE_NAME) 

execute:
	./$(EXECUTABLE_NAME)

clean:
	rm -f *.o
	rm -f main

# ############
# patterns
# ############
# https://www.gnu.org/software/make/manual/html_node/Pattern-Rules.html
# 이 규칙을 사용하면 Makefile에서 개별적으로 
# 각 .cpp 파일에 대한 컴파일 규칙을 작성할 필요 없이 자동으로 컴파일을 수행할 수 있습니다.
# %@ : the file name of the target
# $< : the name of the first prerequisite
# $^ : the names of all the prerequisites

# 모든 .o 파일은 .cpp 파일로부터 생성된다.
# $(CXX_COMPILER_CALL) -c $< -o $@ 명령어를 통해서.
# $< : .cpp 파일의 이름을 의미.
# $@ : .o 파일의 이름을 의미.
%.o: %.cpp
	$(CXX_COMPILER_CALL) -c $< -o $@